{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"error","message":"Registration failed: E11000 duplicate key error collection: pharmacist.users index: wilaya_code_1 dup key: { wilaya_code: 5 }"}
{"level":"error","message":"Registration failed: E11000 duplicate key error collection: pharmacist.users index: wilaya_code_1 dup key: { wilaya_code: 5 }"}
{"level":"error","message":"Registration failed: E11000 duplicate key error collection: pharmacist.users index: wilaya_code_1 dup key: { wilaya_code: 5 }"}
{"level":"info","message":"User registered: example@example.com"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"error","message":"Registration failed: users validation failed: password: Path `password` (`bjj`) is shorter than the minimum allowed length (8)."}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"error","message":"Registration failed: users validation failed: password: Path `password` (`bjj`) is shorter than the minimum allowed length (8)."}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"error","message":"Registration failed: users validation failed: password: Path `password` (`bjj`) is shorter than the minimum allowed length (4)."}
{"level":"info","message":"User registered: lolo@gmaio.com"}
{"level":"error","message":"Registration failed: E11000 duplicate key error collection: pharmacist.users index: email_1 dup key: { email: \"lolo@gmaio.com\" }"}
{"level":"error","message":"Registration failed: users validation failed: password: Path `password` (`bj`) is shorter than the minimum allowed length (4)."}
{"level":"error","message":"Registration failed: users validation failed: password: Path `password` (`bj`) is shorter than the minimum allowed length (4)."}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"error","message":"Error registering user: users validation failed: email: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: false,\n    errored: null,\n    closed: false,\n    closeEmitted: false,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30831,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30831,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 799,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'user-agent',\n    'Dart/2.18 (dart:io)',\n    'content-type',\n    'application/json',\n    'accept-encoding',\n    'gzip',\n    'content-length',\n    '69',\n    'host',\n    '192.168.43.174:3000'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/singup',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30831,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30831,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 799,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/users',\n  originalUrl: '/users/singup',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: null,\n    query: null,\n    pathname: '/singup',\n    path: '/singup',\n    href: '/singup',\n    _raw: '/singup'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    strictContentLength: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 799,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    _maxRequestsPerSocket: 0,\n    locals: [Object: null prototype] {},\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(kEndCalled)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] },\n    [Symbol(kUniqueHeaders)]: null\n  },\n  body: {\n    email: 'mirosselun@gmail.com',\n    password: 'bjjjjjj',\n    wilaya_code: 5\n  },\n  _body: true,\n  length: undefined,\n  route: Route {\n    path: '/singup',\n    stack: [ [Layer] ],\n    methods: { post: true }\n  },\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    'user-agent': 'Dart/2.18 (dart:io)',\n    'content-type': 'application/json',\n    'accept-encoding': 'gzip',\n    'content-length': '69',\n    host: '192.168.43.174:3000'\n  },\n  [Symbol(kHeadersCount)]: 10,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}\" (type IncomingMessage) at path \"email\", password: Cast to string failed for value \"<ref *2> ServerResponse {\n  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  outputData: [],\n  outputSize: 0,\n  writable: true,\n  destroyed: false,\n  _last: false,\n  chunkedEncoding: false,\n  shouldKeepAlive: true,\n  maxRequestsOnConnectionReached: false,\n  _defaultKeepAlive: true,\n  useChunkedEncodingByDefault: true,\n  sendDate: true,\n  _removedConnection: false,\n  _removedContLen: false,\n  _removedTE: false,\n  strictContentLength: false,\n  _contentLength: null,\n  _hasBody: true,\n  _trailer: '',\n  finished: false,\n  _headerSent: false,\n  _closed: false,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30831,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30831,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [IncomingMessage],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: [Circular *2],\n    [Symbol(async_id_symbol)]: 799,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _header: null,\n  _keepAliveTimeout: 5000,\n  _onPendingData: [Function: bound updateOutgoingData],\n  req: IncomingMessage {\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: true,\n      endEmitted: true,\n      reading: false,\n      constructed: true,\n      sync: false,\n      needReadable: false,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: true,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: true,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 799,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    httpVersionMajor: 1,\n    httpVersionMinor: 1,\n    httpVersion: '1.1',\n    complete: true,\n    rawHeaders: [\n      'user-agent',\n      'Dart/2.18 (dart:io)',\n      'content-type',\n      'application/json',\n      'accept-encoding',\n      'gzip',\n      'content-length',\n      '69',\n      'host',\n      '192.168.43.174:3000'\n    ],\n    rawTrailers: [],\n    aborted: false,\n    upgrade: false,\n    url: '/singup',\n    method: 'POST',\n    statusCode: null,\n    statusMessage: null,\n    client: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 799,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _consuming: true,\n    _dumped: false,\n    next: [Function: next],\n    baseUrl: '/users',\n    originalUrl: '/users/singup',\n    _parsedUrl: Url {\n      protocol: null,\n      slashes: null,\n      auth: null,\n      host: null,\n      port: null,\n      hostname: null,\n      hash: null,\n      search: null,\n      query: null,\n      pathname: '/singup',\n      path: '/singup',\n      href: '/singup',\n      _raw: '/singup'\n    },\n    params: {},\n    query: {},\n    res: [Circular *2],\n    body: {\n      email: 'mirosselun@gmail.com',\n      password: 'bjjjjjj',\n      wilaya_code: 5\n    },\n    _body: true,\n    length: undefined,\n    route: Route { path: '/singup', stack: [Array], methods: [Object] },\n    [Symbol(kCapture)]: false,\n    [Symbol(kHeaders)]: {\n      'user-agent': 'Dart/2.18 (dart:io)',\n      'content-type': 'application/json',\n      'accept-encoding': 'gzip',\n      'content-length': '69',\n      host: '192.168.43.174:3000'\n    },\n    [Symbol(kHeadersCount)]: 10,\n    [Symbol(kTrailers)]: null,\n    [Symbol(kTrailersCount)]: 0\n  },\n  _sent100: false,\n  _expect_continue: false,\n  _maxRequestsPerSocket: 0,\n  locals: [Object: null prototype] {},\n  [Symbol(kCapture)]: false,\n  [Symbol(kBytesWritten)]: 0,\n  [Symbol(kEndCalled)]: false,\n  [Symbol(kNeedDrain)]: false,\n  [Symbol(corked)]: 0,\n  [Symbol(kOutHeaders)]: [Object: null prototype] {\n    'x-powered-by': [ 'X-Powered-By', 'Express' ]\n  },\n  [Symbol(kUniqueHeaders)]: null\n}\" (type ServerResponse) at path \"password\", wilaya_code: Cast to Number failed for value \"[Function: next]\" (type function) at path \"wilaya_code\""}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"error","message":"Error registering user: users validation failed: email: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: false,\n    errored: null,\n    closed: false,\n    closeEmitted: false,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 929,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 929,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 714,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'user-agent',\n    'Dart/2.18 (dart:io)',\n    'content-type',\n    'application/json',\n    'accept-encoding',\n    'gzip',\n    'content-length',\n    '63',\n    'host',\n    '192.168.43.174:3000'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/singup',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 929,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 929,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 714,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/users',\n  originalUrl: '/users/singup',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: null,\n    query: null,\n    pathname: '/singup',\n    path: '/singup',\n    href: '/singup',\n    _raw: '/singup'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    strictContentLength: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 714,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    _maxRequestsPerSocket: 0,\n    locals: [Object: null prototype] {},\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(kEndCalled)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] },\n    [Symbol(kUniqueHeaders)]: null\n  },\n  body: { email: 'leila@gmail.com', password: 'jjjjjj', wilaya_code: 5 },\n  _body: true,\n  length: undefined,\n  route: Route {\n    path: '/singup',\n    stack: [ [Layer] ],\n    methods: { post: true }\n  },\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    'user-agent': 'Dart/2.18 (dart:io)',\n    'content-type': 'application/json',\n    'accept-encoding': 'gzip',\n    'content-length': '63',\n    host: '192.168.43.174:3000'\n  },\n  [Symbol(kHeadersCount)]: 10,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}\" (type IncomingMessage) at path \"email\", password: Cast to string failed for value \"<ref *2> ServerResponse {\n  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  outputData: [],\n  outputSize: 0,\n  writable: true,\n  destroyed: false,\n  _last: false,\n  chunkedEncoding: false,\n  shouldKeepAlive: true,\n  maxRequestsOnConnectionReached: false,\n  _defaultKeepAlive: true,\n  useChunkedEncodingByDefault: true,\n  sendDate: true,\n  _removedConnection: false,\n  _removedContLen: false,\n  _removedTE: false,\n  strictContentLength: false,\n  _contentLength: null,\n  _hasBody: true,\n  _trailer: '',\n  finished: false,\n  _headerSent: false,\n  _closed: false,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 929,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 929,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [IncomingMessage],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: [Circular *2],\n    [Symbol(async_id_symbol)]: 714,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _header: null,\n  _keepAliveTimeout: 5000,\n  _onPendingData: [Function: bound updateOutgoingData],\n  req: IncomingMessage {\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: true,\n      endEmitted: true,\n      reading: false,\n      constructed: true,\n      sync: false,\n      needReadable: false,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: true,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: true,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 714,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    httpVersionMajor: 1,\n    httpVersionMinor: 1,\n    httpVersion: '1.1',\n    complete: true,\n    rawHeaders: [\n      'user-agent',\n      'Dart/2.18 (dart:io)',\n      'content-type',\n      'application/json',\n      'accept-encoding',\n      'gzip',\n      'content-length',\n      '63',\n      'host',\n      '192.168.43.174:3000'\n    ],\n    rawTrailers: [],\n    aborted: false,\n    upgrade: false,\n    url: '/singup',\n    method: 'POST',\n    statusCode: null,\n    statusMessage: null,\n    client: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 714,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _consuming: true,\n    _dumped: false,\n    next: [Function: next],\n    baseUrl: '/users',\n    originalUrl: '/users/singup',\n    _parsedUrl: Url {\n      protocol: null,\n      slashes: null,\n      auth: null,\n      host: null,\n      port: null,\n      hostname: null,\n      hash: null,\n      search: null,\n      query: null,\n      pathname: '/singup',\n      path: '/singup',\n      href: '/singup',\n      _raw: '/singup'\n    },\n    params: {},\n    query: {},\n    res: [Circular *2],\n    body: { email: 'leila@gmail.com', password: 'jjjjjj', wilaya_code: 5 },\n    _body: true,\n    length: undefined,\n    route: Route { path: '/singup', stack: [Array], methods: [Object] },\n    [Symbol(kCapture)]: false,\n    [Symbol(kHeaders)]: {\n      'user-agent': 'Dart/2.18 (dart:io)',\n      'content-type': 'application/json',\n      'accept-encoding': 'gzip',\n      'content-length': '63',\n      host: '192.168.43.174:3000'\n    },\n    [Symbol(kHeadersCount)]: 10,\n    [Symbol(kTrailers)]: null,\n    [Symbol(kTrailersCount)]: 0\n  },\n  _sent100: false,\n  _expect_continue: false,\n  _maxRequestsPerSocket: 0,\n  locals: [Object: null prototype] {},\n  [Symbol(kCapture)]: false,\n  [Symbol(kBytesWritten)]: 0,\n  [Symbol(kEndCalled)]: false,\n  [Symbol(kNeedDrain)]: false,\n  [Symbol(corked)]: 0,\n  [Symbol(kOutHeaders)]: [Object: null prototype] {\n    'x-powered-by': [ 'X-Powered-By', 'Express' ]\n  },\n  [Symbol(kUniqueHeaders)]: null\n}\" (type ServerResponse) at path \"password\", wilaya_code: Cast to Number failed for value \"[Function: next]\" (type function) at path \"wilaya_code\""}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"error","message":"Error registering user: users validation failed: email: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: false,\n    errored: null,\n    closed: false,\n    closeEmitted: false,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30940,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30940,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 792,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'user-agent',\n    'Dart/2.18 (dart:io)',\n    'content-type',\n    'application/json',\n    'accept-encoding',\n    'gzip',\n    'content-length',\n    '63',\n    'host',\n    '192.168.43.174:3000'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/singup',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30940,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30940,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 792,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/users',\n  originalUrl: '/users/singup',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: null,\n    query: null,\n    pathname: '/singup',\n    path: '/singup',\n    href: '/singup',\n    _raw: '/singup'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    strictContentLength: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 792,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    _maxRequestsPerSocket: 0,\n    locals: [Object: null prototype] {},\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(kEndCalled)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] },\n    [Symbol(kUniqueHeaders)]: null\n  },\n  body: { email: 'leila@gmail.com', password: 'hhhhhh', wilaya_code: 5 },\n  _body: true,\n  length: undefined,\n  route: Route {\n    path: '/singup',\n    stack: [ [Layer] ],\n    methods: { post: true }\n  },\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    'user-agent': 'Dart/2.18 (dart:io)',\n    'content-type': 'application/json',\n    'accept-encoding': 'gzip',\n    'content-length': '63',\n    host: '192.168.43.174:3000'\n  },\n  [Symbol(kHeadersCount)]: 10,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}\" (type IncomingMessage) at path \"email\", password: Cast to string failed for value \"<ref *2> ServerResponse {\n  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  outputData: [],\n  outputSize: 0,\n  writable: true,\n  destroyed: false,\n  _last: false,\n  chunkedEncoding: false,\n  shouldKeepAlive: true,\n  maxRequestsOnConnectionReached: false,\n  _defaultKeepAlive: true,\n  useChunkedEncodingByDefault: true,\n  sendDate: true,\n  _removedConnection: false,\n  _removedContLen: false,\n  _removedTE: false,\n  strictContentLength: false,\n  _contentLength: null,\n  _hasBody: true,\n  _trailer: '',\n  finished: false,\n  _headerSent: false,\n  _closed: false,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30940,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30940,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [IncomingMessage],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: [Circular *2],\n    [Symbol(async_id_symbol)]: 792,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _header: null,\n  _keepAliveTimeout: 5000,\n  _onPendingData: [Function: bound updateOutgoingData],\n  req: IncomingMessage {\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: true,\n      endEmitted: true,\n      reading: false,\n      constructed: true,\n      sync: false,\n      needReadable: false,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: true,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: true,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 792,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    httpVersionMajor: 1,\n    httpVersionMinor: 1,\n    httpVersion: '1.1',\n    complete: true,\n    rawHeaders: [\n      'user-agent',\n      'Dart/2.18 (dart:io)',\n      'content-type',\n      'application/json',\n      'accept-encoding',\n      'gzip',\n      'content-length',\n      '63',\n      'host',\n      '192.168.43.174:3000'\n    ],\n    rawTrailers: [],\n    aborted: false,\n    upgrade: false,\n    url: '/singup',\n    method: 'POST',\n    statusCode: null,\n    statusMessage: null,\n    client: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 792,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _consuming: true,\n    _dumped: false,\n    next: [Function: next],\n    baseUrl: '/users',\n    originalUrl: '/users/singup',\n    _parsedUrl: Url {\n      protocol: null,\n      slashes: null,\n      auth: null,\n      host: null,\n      port: null,\n      hostname: null,\n      hash: null,\n      search: null,\n      query: null,\n      pathname: '/singup',\n      path: '/singup',\n      href: '/singup',\n      _raw: '/singup'\n    },\n    params: {},\n    query: {},\n    res: [Circular *2],\n    body: { email: 'leila@gmail.com', password: 'hhhhhh', wilaya_code: 5 },\n    _body: true,\n    length: undefined,\n    route: Route { path: '/singup', stack: [Array], methods: [Object] },\n    [Symbol(kCapture)]: false,\n    [Symbol(kHeaders)]: {\n      'user-agent': 'Dart/2.18 (dart:io)',\n      'content-type': 'application/json',\n      'accept-encoding': 'gzip',\n      'content-length': '63',\n      host: '192.168.43.174:3000'\n    },\n    [Symbol(kHeadersCount)]: 10,\n    [Symbol(kTrailers)]: null,\n    [Symbol(kTrailersCount)]: 0\n  },\n  _sent100: false,\n  _expect_continue: false,\n  _maxRequestsPerSocket: 0,\n  locals: [Object: null prototype] {},\n  [Symbol(kCapture)]: false,\n  [Symbol(kBytesWritten)]: 0,\n  [Symbol(kEndCalled)]: false,\n  [Symbol(kNeedDrain)]: false,\n  [Symbol(corked)]: 0,\n  [Symbol(kOutHeaders)]: [Object: null prototype] {\n    'x-powered-by': [ 'X-Powered-By', 'Express' ]\n  },\n  [Symbol(kUniqueHeaders)]: null\n}\" (type ServerResponse) at path \"password\", wilaya_code: Cast to Number failed for value \"[Function: next]\" (type function) at path \"wilaya_code\""}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"error","message":"Error registering user: users validation failed: email: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: false,\n    errored: null,\n    closed: false,\n    closeEmitted: false,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30793,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30793,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 792,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'user-agent',\n    'Dart/2.18 (dart:io)',\n    'content-type',\n    'application/json',\n    'accept-encoding',\n    'gzip',\n    'content-length',\n    '63',\n    'host',\n    '192.168.43.174:3000'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/singup',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30793,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30793,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 792,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/users',\n  originalUrl: '/users/singup',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: null,\n    query: null,\n    pathname: '/singup',\n    path: '/singup',\n    href: '/singup',\n    _raw: '/singup'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    strictContentLength: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 792,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    _maxRequestsPerSocket: 0,\n    locals: [Object: null prototype] {},\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(kEndCalled)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] },\n    [Symbol(kUniqueHeaders)]: null\n  },\n  body: { email: 'leila@gmail.com', password: 'hhhhhh', wilaya_code: 5 },\n  _body: true,\n  length: undefined,\n  route: Route {\n    path: '/singup',\n    stack: [ [Layer] ],\n    methods: { post: true }\n  },\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    'user-agent': 'Dart/2.18 (dart:io)',\n    'content-type': 'application/json',\n    'accept-encoding': 'gzip',\n    'content-length': '63',\n    host: '192.168.43.174:3000'\n  },\n  [Symbol(kHeadersCount)]: 10,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}\" (type IncomingMessage) at path \"email\", password: Cast to string failed for value \"<ref *2> ServerResponse {\n  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  outputData: [],\n  outputSize: 0,\n  writable: true,\n  destroyed: false,\n  _last: false,\n  chunkedEncoding: false,\n  shouldKeepAlive: true,\n  maxRequestsOnConnectionReached: false,\n  _defaultKeepAlive: true,\n  useChunkedEncodingByDefault: true,\n  sendDate: true,\n  _removedConnection: false,\n  _removedContLen: false,\n  _removedTE: false,\n  strictContentLength: false,\n  _contentLength: null,\n  _hasBody: true,\n  _trailer: '',\n  finished: false,\n  _headerSent: false,\n  _closed: false,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30793,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 30793,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [IncomingMessage],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: [Circular *2],\n    [Symbol(async_id_symbol)]: 792,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _header: null,\n  _keepAliveTimeout: 5000,\n  _onPendingData: [Function: bound updateOutgoingData],\n  req: IncomingMessage {\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: true,\n      endEmitted: true,\n      reading: false,\n      constructed: true,\n      sync: false,\n      needReadable: false,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: true,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: true,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 792,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    httpVersionMajor: 1,\n    httpVersionMinor: 1,\n    httpVersion: '1.1',\n    complete: true,\n    rawHeaders: [\n      'user-agent',\n      'Dart/2.18 (dart:io)',\n      'content-type',\n      'application/json',\n      'accept-encoding',\n      'gzip',\n      'content-length',\n      '63',\n      'host',\n      '192.168.43.174:3000'\n    ],\n    rawTrailers: [],\n    aborted: false,\n    upgrade: false,\n    url: '/singup',\n    method: 'POST',\n    statusCode: null,\n    statusMessage: null,\n    client: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 792,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _consuming: true,\n    _dumped: false,\n    next: [Function: next],\n    baseUrl: '/users',\n    originalUrl: '/users/singup',\n    _parsedUrl: Url {\n      protocol: null,\n      slashes: null,\n      auth: null,\n      host: null,\n      port: null,\n      hostname: null,\n      hash: null,\n      search: null,\n      query: null,\n      pathname: '/singup',\n      path: '/singup',\n      href: '/singup',\n      _raw: '/singup'\n    },\n    params: {},\n    query: {},\n    res: [Circular *2],\n    body: { email: 'leila@gmail.com', password: 'hhhhhh', wilaya_code: 5 },\n    _body: true,\n    length: undefined,\n    route: Route { path: '/singup', stack: [Array], methods: [Object] },\n    [Symbol(kCapture)]: false,\n    [Symbol(kHeaders)]: {\n      'user-agent': 'Dart/2.18 (dart:io)',\n      'content-type': 'application/json',\n      'accept-encoding': 'gzip',\n      'content-length': '63',\n      host: '192.168.43.174:3000'\n    },\n    [Symbol(kHeadersCount)]: 10,\n    [Symbol(kTrailers)]: null,\n    [Symbol(kTrailersCount)]: 0\n  },\n  _sent100: false,\n  _expect_continue: false,\n  _maxRequestsPerSocket: 0,\n  locals: [Object: null prototype] {},\n  [Symbol(kCapture)]: false,\n  [Symbol(kBytesWritten)]: 0,\n  [Symbol(kEndCalled)]: false,\n  [Symbol(kNeedDrain)]: false,\n  [Symbol(corked)]: 0,\n  [Symbol(kOutHeaders)]: [Object: null prototype] {\n    'x-powered-by': [ 'X-Powered-By', 'Express' ]\n  },\n  [Symbol(kUniqueHeaders)]: null\n}\" (type ServerResponse) at path \"password\", wilaya_code: Cast to Number failed for value \"[Function: next]\" (type function) at path \"wilaya_code\""}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"error","message":"Error registering user: users validation failed: email: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: false,\n    errored: null,\n    closed: false,\n    closeEmitted: false,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 796,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 796,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 333,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'user-agent',\n    'Dart/2.18 (dart:io)',\n    'content-type',\n    'application/json',\n    'accept-encoding',\n    'gzip',\n    'content-length',\n    '63',\n    'host',\n    '192.168.43.174:3000'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/singup',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 796,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 796,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 333,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/users',\n  originalUrl: '/users/singup',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: null,\n    query: null,\n    pathname: '/singup',\n    path: '/singup',\n    href: '/singup',\n    _raw: '/singup'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    strictContentLength: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 333,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    _maxRequestsPerSocket: 0,\n    locals: [Object: null prototype] {},\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(kEndCalled)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] },\n    [Symbol(kUniqueHeaders)]: null\n  },\n  body: { email: 'leila@gmail.com', password: 'jjjjjj', wilaya_code: 5 },\n  _body: true,\n  length: undefined,\n  route: Route {\n    path: '/singup',\n    stack: [ [Layer] ],\n    methods: { post: true }\n  },\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    'user-agent': 'Dart/2.18 (dart:io)',\n    'content-type': 'application/json',\n    'accept-encoding': 'gzip',\n    'content-length': '63',\n    host: '192.168.43.174:3000'\n  },\n  [Symbol(kHeadersCount)]: 10,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}\" (type IncomingMessage) at path \"email\", password: Cast to string failed for value \"<ref *2> ServerResponse {\n  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  outputData: [],\n  outputSize: 0,\n  writable: true,\n  destroyed: false,\n  _last: false,\n  chunkedEncoding: false,\n  shouldKeepAlive: true,\n  maxRequestsOnConnectionReached: false,\n  _defaultKeepAlive: true,\n  useChunkedEncodingByDefault: true,\n  sendDate: true,\n  _removedConnection: false,\n  _removedContLen: false,\n  _removedTE: false,\n  strictContentLength: false,\n  _contentLength: null,\n  _hasBody: true,\n  _trailer: '',\n  finished: false,\n  _headerSent: false,\n  _closed: false,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 796,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 796,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [IncomingMessage],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: [Circular *2],\n    [Symbol(async_id_symbol)]: 333,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _header: null,\n  _keepAliveTimeout: 5000,\n  _onPendingData: [Function: bound updateOutgoingData],\n  req: IncomingMessage {\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: true,\n      endEmitted: true,\n      reading: false,\n      constructed: true,\n      sync: false,\n      needReadable: false,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: true,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: true,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 333,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    httpVersionMajor: 1,\n    httpVersionMinor: 1,\n    httpVersion: '1.1',\n    complete: true,\n    rawHeaders: [\n      'user-agent',\n      'Dart/2.18 (dart:io)',\n      'content-type',\n      'application/json',\n      'accept-encoding',\n      'gzip',\n      'content-length',\n      '63',\n      'host',\n      '192.168.43.174:3000'\n    ],\n    rawTrailers: [],\n    aborted: false,\n    upgrade: false,\n    url: '/singup',\n    method: 'POST',\n    statusCode: null,\n    statusMessage: null,\n    client: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 333,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _consuming: true,\n    _dumped: false,\n    next: [Function: next],\n    baseUrl: '/users',\n    originalUrl: '/users/singup',\n    _parsedUrl: Url {\n      protocol: null,\n      slashes: null,\n      auth: null,\n      host: null,\n      port: null,\n      hostname: null,\n      hash: null,\n      search: null,\n      query: null,\n      pathname: '/singup',\n      path: '/singup',\n      href: '/singup',\n      _raw: '/singup'\n    },\n    params: {},\n    query: {},\n    res: [Circular *2],\n    body: { email: 'leila@gmail.com', password: 'jjjjjj', wilaya_code: 5 },\n    _body: true,\n    length: undefined,\n    route: Route { path: '/singup', stack: [Array], methods: [Object] },\n    [Symbol(kCapture)]: false,\n    [Symbol(kHeaders)]: {\n      'user-agent': 'Dart/2.18 (dart:io)',\n      'content-type': 'application/json',\n      'accept-encoding': 'gzip',\n      'content-length': '63',\n      host: '192.168.43.174:3000'\n    },\n    [Symbol(kHeadersCount)]: 10,\n    [Symbol(kTrailers)]: null,\n    [Symbol(kTrailersCount)]: 0\n  },\n  _sent100: false,\n  _expect_continue: false,\n  _maxRequestsPerSocket: 0,\n  locals: [Object: null prototype] {},\n  [Symbol(kCapture)]: false,\n  [Symbol(kBytesWritten)]: 0,\n  [Symbol(kEndCalled)]: false,\n  [Symbol(kNeedDrain)]: false,\n  [Symbol(corked)]: 0,\n  [Symbol(kOutHeaders)]: [Object: null prototype] {\n    'x-powered-by': [ 'X-Powered-By', 'Express' ]\n  },\n  [Symbol(kUniqueHeaders)]: null\n}\" (type ServerResponse) at path \"password\", wilaya_code: Cast to Number failed for value \"[Function: next]\" (type function) at path \"wilaya_code\""}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"error","message":"Error registering user: users validation failed: email: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: false,\n    errored: null,\n    closed: false,\n    closeEmitted: false,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 1106,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 1106,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 256,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'user-agent',\n    'Dart/2.18 (dart:io)',\n    'content-type',\n    'application/json',\n    'accept-encoding',\n    'gzip',\n    'content-length',\n    '66',\n    'host',\n    '192.168.43.174:3000'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/singup',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 1106,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 1106,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 256,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/users',\n  originalUrl: '/users/singup',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: null,\n    query: null,\n    pathname: '/singup',\n    path: '/singup',\n    href: '/singup',\n    _raw: '/singup'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    strictContentLength: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 256,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    _maxRequestsPerSocket: 0,\n    locals: [Object: null prototype] {},\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(kEndCalled)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] },\n    [Symbol(kUniqueHeaders)]: null\n  },\n  body: { email: 'mirosselun@gmail.com', password: 'ghhh', wilaya_code: 5 },\n  _body: true,\n  length: undefined,\n  route: Route {\n    path: '/singup',\n    stack: [ [Layer] ],\n    methods: { post: true }\n  },\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    'user-agent': 'Dart/2.18 (dart:io)',\n    'content-type': 'application/json',\n    'accept-encoding': 'gzip',\n    'content-length': '66',\n    host: '192.168.43.174:3000'\n  },\n  [Symbol(kHeadersCount)]: 10,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}\" (type IncomingMessage) at path \"email\", password: Cast to string failed for value \"<ref *2> ServerResponse {\n  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  outputData: [],\n  outputSize: 0,\n  writable: true,\n  destroyed: false,\n  _last: false,\n  chunkedEncoding: false,\n  shouldKeepAlive: true,\n  maxRequestsOnConnectionReached: false,\n  _defaultKeepAlive: true,\n  useChunkedEncodingByDefault: true,\n  sendDate: true,\n  _removedConnection: false,\n  _removedContLen: false,\n  _removedTE: false,\n  strictContentLength: false,\n  _contentLength: null,\n  _hasBody: true,\n  _trailer: '',\n  finished: false,\n  _headerSent: false,\n  _closed: false,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 1106,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 1106,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [IncomingMessage],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: [Circular *2],\n    [Symbol(async_id_symbol)]: 256,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _header: null,\n  _keepAliveTimeout: 5000,\n  _onPendingData: [Function: bound updateOutgoingData],\n  req: IncomingMessage {\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: true,\n      endEmitted: true,\n      reading: false,\n      constructed: true,\n      sync: false,\n      needReadable: false,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: true,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: true,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 256,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    httpVersionMajor: 1,\n    httpVersionMinor: 1,\n    httpVersion: '1.1',\n    complete: true,\n    rawHeaders: [\n      'user-agent',\n      'Dart/2.18 (dart:io)',\n      'content-type',\n      'application/json',\n      'accept-encoding',\n      'gzip',\n      'content-length',\n      '66',\n      'host',\n      '192.168.43.174:3000'\n    ],\n    rawTrailers: [],\n    aborted: false,\n    upgrade: false,\n    url: '/singup',\n    method: 'POST',\n    statusCode: null,\n    statusMessage: null,\n    client: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 256,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _consuming: true,\n    _dumped: false,\n    next: [Function: next],\n    baseUrl: '/users',\n    originalUrl: '/users/singup',\n    _parsedUrl: Url {\n      protocol: null,\n      slashes: null,\n      auth: null,\n      host: null,\n      port: null,\n      hostname: null,\n      hash: null,\n      search: null,\n      query: null,\n      pathname: '/singup',\n      path: '/singup',\n      href: '/singup',\n      _raw: '/singup'\n    },\n    params: {},\n    query: {},\n    res: [Circular *2],\n    body: { email: 'mirosselun@gmail.com', password: 'ghhh', wilaya_code: 5 },\n    _body: true,\n    length: undefined,\n    route: Route { path: '/singup', stack: [Array], methods: [Object] },\n    [Symbol(kCapture)]: false,\n    [Symbol(kHeaders)]: {\n      'user-agent': 'Dart/2.18 (dart:io)',\n      'content-type': 'application/json',\n      'accept-encoding': 'gzip',\n      'content-length': '66',\n      host: '192.168.43.174:3000'\n    },\n    [Symbol(kHeadersCount)]: 10,\n    [Symbol(kTrailers)]: null,\n    [Symbol(kTrailersCount)]: 0\n  },\n  _sent100: false,\n  _expect_continue: false,\n  _maxRequestsPerSocket: 0,\n  locals: [Object: null prototype] {},\n  [Symbol(kCapture)]: false,\n  [Symbol(kBytesWritten)]: 0,\n  [Symbol(kEndCalled)]: false,\n  [Symbol(kNeedDrain)]: false,\n  [Symbol(corked)]: 0,\n  [Symbol(kOutHeaders)]: [Object: null prototype] {\n    'x-powered-by': [ 'X-Powered-By', 'Express' ]\n  },\n  [Symbol(kUniqueHeaders)]: null\n}\" (type ServerResponse) at path \"password\", wilaya_code: Cast to Number failed for value \"[Function: next]\" (type function) at path \"wilaya_code\""}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"error","message":"Error registering user: users validation failed: email: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: false,\n    errored: null,\n    closed: false,\n    closeEmitted: false,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 1463,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 1463,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 500,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'user-agent',\n    'Dart/2.18 (dart:io)',\n    'content-type',\n    'application/json',\n    'accept-encoding',\n    'gzip',\n    'content-length',\n    '63',\n    'host',\n    '192.168.43.174:3000'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/singup',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 1463,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 1463,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 500,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/users',\n  originalUrl: '/users/singup',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: null,\n    query: null,\n    pathname: '/singup',\n    path: '/singup',\n    href: '/singup',\n    _raw: '/singup'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    strictContentLength: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 500,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    _maxRequestsPerSocket: 0,\n    locals: [Object: null prototype] {},\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(kEndCalled)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] },\n    [Symbol(kUniqueHeaders)]: null\n  },\n  body: { email: 'leila@gmail.com', password: 'hhhhhh', wilaya_code: 5 },\n  _body: true,\n  length: undefined,\n  route: Route {\n    path: '/singup',\n    stack: [ [Layer] ],\n    methods: { post: true }\n  },\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    'user-agent': 'Dart/2.18 (dart:io)',\n    'content-type': 'application/json',\n    'accept-encoding': 'gzip',\n    'content-length': '63',\n    host: '192.168.43.174:3000'\n  },\n  [Symbol(kHeadersCount)]: 10,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}\" (type IncomingMessage) at path \"email\", password: Cast to string failed for value \"<ref *2> ServerResponse {\n  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  outputData: [],\n  outputSize: 0,\n  writable: true,\n  destroyed: false,\n  _last: false,\n  chunkedEncoding: false,\n  shouldKeepAlive: true,\n  maxRequestsOnConnectionReached: false,\n  _defaultKeepAlive: true,\n  useChunkedEncodingByDefault: true,\n  sendDate: true,\n  _removedConnection: false,\n  _removedContLen: false,\n  _removedTE: false,\n  strictContentLength: false,\n  _contentLength: null,\n  _hasBody: true,\n  _trailer: '',\n  finished: false,\n  _headerSent: false,\n  _closed: false,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 1463,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 1463,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [IncomingMessage],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: [Circular *2],\n    [Symbol(async_id_symbol)]: 500,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _header: null,\n  _keepAliveTimeout: 5000,\n  _onPendingData: [Function: bound updateOutgoingData],\n  req: IncomingMessage {\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: true,\n      endEmitted: true,\n      reading: false,\n      constructed: true,\n      sync: false,\n      needReadable: false,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: true,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: true,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 500,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    httpVersionMajor: 1,\n    httpVersionMinor: 1,\n    httpVersion: '1.1',\n    complete: true,\n    rawHeaders: [\n      'user-agent',\n      'Dart/2.18 (dart:io)',\n      'content-type',\n      'application/json',\n      'accept-encoding',\n      'gzip',\n      'content-length',\n      '63',\n      'host',\n      '192.168.43.174:3000'\n    ],\n    rawTrailers: [],\n    aborted: false,\n    upgrade: false,\n    url: '/singup',\n    method: 'POST',\n    statusCode: null,\n    statusMessage: null,\n    client: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 500,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _consuming: true,\n    _dumped: false,\n    next: [Function: next],\n    baseUrl: '/users',\n    originalUrl: '/users/singup',\n    _parsedUrl: Url {\n      protocol: null,\n      slashes: null,\n      auth: null,\n      host: null,\n      port: null,\n      hostname: null,\n      hash: null,\n      search: null,\n      query: null,\n      pathname: '/singup',\n      path: '/singup',\n      href: '/singup',\n      _raw: '/singup'\n    },\n    params: {},\n    query: {},\n    res: [Circular *2],\n    body: { email: 'leila@gmail.com', password: 'hhhhhh', wilaya_code: 5 },\n    _body: true,\n    length: undefined,\n    route: Route { path: '/singup', stack: [Array], methods: [Object] },\n    [Symbol(kCapture)]: false,\n    [Symbol(kHeaders)]: {\n      'user-agent': 'Dart/2.18 (dart:io)',\n      'content-type': 'application/json',\n      'accept-encoding': 'gzip',\n      'content-length': '63',\n      host: '192.168.43.174:3000'\n    },\n    [Symbol(kHeadersCount)]: 10,\n    [Symbol(kTrailers)]: null,\n    [Symbol(kTrailersCount)]: 0\n  },\n  _sent100: false,\n  _expect_continue: false,\n  _maxRequestsPerSocket: 0,\n  locals: [Object: null prototype] {},\n  [Symbol(kCapture)]: false,\n  [Symbol(kBytesWritten)]: 0,\n  [Symbol(kEndCalled)]: false,\n  [Symbol(kNeedDrain)]: false,\n  [Symbol(corked)]: 0,\n  [Symbol(kOutHeaders)]: [Object: null prototype] {\n    'x-powered-by': [ 'X-Powered-By', 'Express' ]\n  },\n  [Symbol(kUniqueHeaders)]: null\n}\" (type ServerResponse) at path \"password\", wilaya_code: Cast to Number failed for value \"[Function: next]\" (type function) at path \"wilaya_code\""}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"error","message":"Error registering user: users validation failed: email: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: false,\n    errored: null,\n    closed: false,\n    closeEmitted: false,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 1834258,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 1834258,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 2059,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'user-agent',\n    'Dart/2.18 (dart:io)',\n    'content-type',\n    'application/json',\n    'accept-encoding',\n    'gzip',\n    'content-length',\n    '62',\n    'host',\n    '192.168.43.174:3000'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/singup',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 1834258,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 1834258,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 2059,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/users',\n  originalUrl: '/users/singup',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: null,\n    query: null,\n    pathname: '/singup',\n    path: '/singup',\n    href: '/singup',\n    _raw: '/singup'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    strictContentLength: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 2059,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    _maxRequestsPerSocket: 0,\n    locals: [Object: null prototype] {},\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(kEndCalled)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] },\n    [Symbol(kUniqueHeaders)]: null\n  },\n  body: { email: 'lzil@gmail.com', password: 'gggggg', wilaya_code: 5 },\n  _body: true,\n  length: undefined,\n  route: Route {\n    path: '/singup',\n    stack: [ [Layer] ],\n    methods: { post: true }\n  },\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    'user-agent': 'Dart/2.18 (dart:io)',\n    'content-type': 'application/json',\n    'accept-encoding': 'gzip',\n    'content-length': '62',\n    host: '192.168.43.174:3000'\n  },\n  [Symbol(kHeadersCount)]: 10,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}\" (type IncomingMessage) at path \"email\", password: Cast to string failed for value \"<ref *2> ServerResponse {\n  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  outputData: [],\n  outputSize: 0,\n  writable: true,\n  destroyed: false,\n  _last: false,\n  chunkedEncoding: false,\n  shouldKeepAlive: true,\n  maxRequestsOnConnectionReached: false,\n  _defaultKeepAlive: true,\n  useChunkedEncodingByDefault: true,\n  sendDate: true,\n  _removedConnection: false,\n  _removedContLen: false,\n  _removedTE: false,\n  strictContentLength: false,\n  _contentLength: null,\n  _hasBody: true,\n  _trailer: '',\n  finished: false,\n  _headerSent: false,\n  _closed: false,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 1834258,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 2,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 1834258,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [IncomingMessage],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: [Circular *2],\n    [Symbol(async_id_symbol)]: 2059,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _header: null,\n  _keepAliveTimeout: 5000,\n  _onPendingData: [Function: bound updateOutgoingData],\n  req: IncomingMessage {\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: true,\n      endEmitted: true,\n      reading: false,\n      constructed: true,\n      sync: false,\n      needReadable: false,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: true,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: true,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 2059,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    httpVersionMajor: 1,\n    httpVersionMinor: 1,\n    httpVersion: '1.1',\n    complete: true,\n    rawHeaders: [\n      'user-agent',\n      'Dart/2.18 (dart:io)',\n      'content-type',\n      'application/json',\n      'accept-encoding',\n      'gzip',\n      'content-length',\n      '62',\n      'host',\n      '192.168.43.174:3000'\n    ],\n    rawTrailers: [],\n    aborted: false,\n    upgrade: false,\n    url: '/singup',\n    method: 'POST',\n    statusCode: null,\n    statusMessage: null,\n    client: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 2059,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _consuming: true,\n    _dumped: false,\n    next: [Function: next],\n    baseUrl: '/users',\n    originalUrl: '/users/singup',\n    _parsedUrl: Url {\n      protocol: null,\n      slashes: null,\n      auth: null,\n      host: null,\n      port: null,\n      hostname: null,\n      hash: null,\n      search: null,\n      query: null,\n      pathname: '/singup',\n      path: '/singup',\n      href: '/singup',\n      _raw: '/singup'\n    },\n    params: {},\n    query: {},\n    res: [Circular *2],\n    body: { email: 'lzil@gmail.com', password: 'gggggg', wilaya_code: 5 },\n    _body: true,\n    length: undefined,\n    route: Route { path: '/singup', stack: [Array], methods: [Object] },\n    [Symbol(kCapture)]: false,\n    [Symbol(kHeaders)]: {\n      'user-agent': 'Dart/2.18 (dart:io)',\n      'content-type': 'application/json',\n      'accept-encoding': 'gzip',\n      'content-length': '62',\n      host: '192.168.43.174:3000'\n    },\n    [Symbol(kHeadersCount)]: 10,\n    [Symbol(kTrailers)]: null,\n    [Symbol(kTrailersCount)]: 0\n  },\n  _sent100: false,\n  _expect_continue: false,\n  _maxRequestsPerSocket: 0,\n  locals: [Object: null prototype] {},\n  [Symbol(kCapture)]: false,\n  [Symbol(kBytesWritten)]: 0,\n  [Symbol(kEndCalled)]: false,\n  [Symbol(kNeedDrain)]: false,\n  [Symbol(corked)]: 0,\n  [Symbol(kOutHeaders)]: [Object: null prototype] {\n    'x-powered-by': [ 'X-Powered-By', 'Express' ]\n  },\n  [Symbol(kUniqueHeaders)]: null\n}\" (type ServerResponse) at path \"password\", wilaya_code: Cast to Number failed for value \"[Function: next]\" (type function) at path \"wilaya_code\""}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"error","message":"Error registering user: users validation failed: email: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: false,\n    errored: null,\n    closed: false,\n    closeEmitted: false,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 2681,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 2681,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 714,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'user-agent',\n    'Dart/2.18 (dart:io)',\n    'content-type',\n    'application/json',\n    'accept-encoding',\n    'gzip',\n    'content-length',\n    '61',\n    'host',\n    '192.168.43.174:3000'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/singup',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 2681,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 2681,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 714,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/users',\n  originalUrl: '/users/singup',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: null,\n    query: null,\n    pathname: '/singup',\n    path: '/singup',\n    href: '/singup',\n    _raw: '/singup'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    strictContentLength: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 714,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    _maxRequestsPerSocket: 0,\n    locals: [Object: null prototype] {},\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(kEndCalled)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] },\n    [Symbol(kUniqueHeaders)]: null\n  },\n  body: { email: 'lllll@gmail.com', password: 'kkkk', wilaya_code: 5 },\n  _body: true,\n  length: undefined,\n  route: Route {\n    path: '/singup',\n    stack: [ [Layer] ],\n    methods: { post: true }\n  },\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    'user-agent': 'Dart/2.18 (dart:io)',\n    'content-type': 'application/json',\n    'accept-encoding': 'gzip',\n    'content-length': '61',\n    host: '192.168.43.174:3000'\n  },\n  [Symbol(kHeadersCount)]: 10,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}\" (type IncomingMessage) at path \"email\", password: Cast to string failed for value \"<ref *2> ServerResponse {\n  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  outputData: [],\n  outputSize: 0,\n  writable: true,\n  destroyed: false,\n  _last: false,\n  chunkedEncoding: false,\n  shouldKeepAlive: true,\n  maxRequestsOnConnectionReached: false,\n  _defaultKeepAlive: true,\n  useChunkedEncodingByDefault: true,\n  sendDate: true,\n  _removedConnection: false,\n  _removedContLen: false,\n  _removedTE: false,\n  strictContentLength: false,\n  _contentLength: null,\n  _hasBody: true,\n  _trailer: '',\n  finished: false,\n  _headerSent: false,\n  _closed: false,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 2681,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [Timeout],\n        _idleStart: 2681,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [IncomingMessage],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: [Circular *2],\n    [Symbol(async_id_symbol)]: 714,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _header: null,\n  _keepAliveTimeout: 5000,\n  _onPendingData: [Function: bound updateOutgoingData],\n  req: IncomingMessage {\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: true,\n      endEmitted: true,\n      reading: false,\n      constructed: true,\n      sync: false,\n      needReadable: false,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: true,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: true,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 714,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    httpVersionMajor: 1,\n    httpVersionMinor: 1,\n    httpVersion: '1.1',\n    complete: true,\n    rawHeaders: [\n      'user-agent',\n      'Dart/2.18 (dart:io)',\n      'content-type',\n      'application/json',\n      'accept-encoding',\n      'gzip',\n      'content-length',\n      '61',\n      'host',\n      '192.168.43.174:3000'\n    ],\n    rawTrailers: [],\n    aborted: false,\n    upgrade: false,\n    url: '/singup',\n    method: 'POST',\n    statusCode: null,\n    statusMessage: null,\n    client: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 714,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _consuming: true,\n    _dumped: false,\n    next: [Function: next],\n    baseUrl: '/users',\n    originalUrl: '/users/singup',\n    _parsedUrl: Url {\n      protocol: null,\n      slashes: null,\n      auth: null,\n      host: null,\n      port: null,\n      hostname: null,\n      hash: null,\n      search: null,\n      query: null,\n      pathname: '/singup',\n      path: '/singup',\n      href: '/singup',\n      _raw: '/singup'\n    },\n    params: {},\n    query: {},\n    res: [Circular *2],\n    body: { email: 'lllll@gmail.com', password: 'kkkk', wilaya_code: 5 },\n    _body: true,\n    length: undefined,\n    route: Route { path: '/singup', stack: [Array], methods: [Object] },\n    [Symbol(kCapture)]: false,\n    [Symbol(kHeaders)]: {\n      'user-agent': 'Dart/2.18 (dart:io)',\n      'content-type': 'application/json',\n      'accept-encoding': 'gzip',\n      'content-length': '61',\n      host: '192.168.43.174:3000'\n    },\n    [Symbol(kHeadersCount)]: 10,\n    [Symbol(kTrailers)]: null,\n    [Symbol(kTrailersCount)]: 0\n  },\n  _sent100: false,\n  _expect_continue: false,\n  _maxRequestsPerSocket: 0,\n  locals: [Object: null prototype] {},\n  [Symbol(kCapture)]: false,\n  [Symbol(kBytesWritten)]: 0,\n  [Symbol(kEndCalled)]: false,\n  [Symbol(kNeedDrain)]: false,\n  [Symbol(corked)]: 0,\n  [Symbol(kOutHeaders)]: [Object: null prototype] {\n    'x-powered-by': [ 'X-Powered-By', 'Express' ]\n  },\n  [Symbol(kUniqueHeaders)]: null\n}\" (type ServerResponse) at path \"password\", wilaya_code: Cast to Number failed for value \"[Function: next]\" (type function) at path \"wilaya_code\""}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"error","message":"Error registering user: users validation failed: email: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: false,\n    errored: null,\n    closed: false,\n    closeEmitted: false,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 151548,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 151548,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 890,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'user-agent',\n    'Dart/2.18 (dart:io)',\n    'content-type',\n    'application/json',\n    'accept-encoding',\n    'gzip',\n    'content-length',\n    '62',\n    'host',\n    '192.168.43.174:3000'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/singup',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 151548,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 151548,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 890,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/users',\n  originalUrl: '/users/singup',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: null,\n    query: null,\n    pathname: '/singup',\n    path: '/singup',\n    href: '/singup',\n    _raw: '/singup'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    strictContentLength: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 890,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    _maxRequestsPerSocket: 0,\n    locals: [Object: null prototype] {},\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(kEndCalled)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] },\n    [Symbol(kUniqueHeaders)]: null\n  },\n  body: { email: 'lllll@gmail.com', password: 'jjjjj', wilaya_code: 5 },\n  _body: true,\n  length: undefined,\n  route: Route {\n    path: '/singup',\n    stack: [ [Layer] ],\n    methods: { post: true }\n  },\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    'user-agent': 'Dart/2.18 (dart:io)',\n    'content-type': 'application/json',\n    'accept-encoding': 'gzip',\n    'content-length': '62',\n    host: '192.168.43.174:3000'\n  },\n  [Symbol(kHeadersCount)]: 10,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}\" (type IncomingMessage) at path \"email\", password: Cast to string failed for value \"<ref *2> ServerResponse {\n  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  outputData: [],\n  outputSize: 0,\n  writable: true,\n  destroyed: false,\n  _last: false,\n  chunkedEncoding: false,\n  shouldKeepAlive: true,\n  maxRequestsOnConnectionReached: false,\n  _defaultKeepAlive: true,\n  useChunkedEncodingByDefault: true,\n  sendDate: true,\n  _removedConnection: false,\n  _removedContLen: false,\n  _removedTE: false,\n  strictContentLength: false,\n  _contentLength: null,\n  _hasBody: true,\n  _trailer: '',\n  finished: false,\n  _headerSent: false,\n  _closed: false,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 151548,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 151548,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [IncomingMessage],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: [Circular *2],\n    [Symbol(async_id_symbol)]: 890,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _header: null,\n  _keepAliveTimeout: 5000,\n  _onPendingData: [Function: bound updateOutgoingData],\n  req: IncomingMessage {\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: true,\n      endEmitted: true,\n      reading: false,\n      constructed: true,\n      sync: false,\n      needReadable: false,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: true,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: true,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 890,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    httpVersionMajor: 1,\n    httpVersionMinor: 1,\n    httpVersion: '1.1',\n    complete: true,\n    rawHeaders: [\n      'user-agent',\n      'Dart/2.18 (dart:io)',\n      'content-type',\n      'application/json',\n      'accept-encoding',\n      'gzip',\n      'content-length',\n      '62',\n      'host',\n      '192.168.43.174:3000'\n    ],\n    rawTrailers: [],\n    aborted: false,\n    upgrade: false,\n    url: '/singup',\n    method: 'POST',\n    statusCode: null,\n    statusMessage: null,\n    client: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 890,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _consuming: true,\n    _dumped: false,\n    next: [Function: next],\n    baseUrl: '/users',\n    originalUrl: '/users/singup',\n    _parsedUrl: Url {\n      protocol: null,\n      slashes: null,\n      auth: null,\n      host: null,\n      port: null,\n      hostname: null,\n      hash: null,\n      search: null,\n      query: null,\n      pathname: '/singup',\n      path: '/singup',\n      href: '/singup',\n      _raw: '/singup'\n    },\n    params: {},\n    query: {},\n    res: [Circular *2],\n    body: { email: 'lllll@gmail.com', password: 'jjjjj', wilaya_code: 5 },\n    _body: true,\n    length: undefined,\n    route: Route { path: '/singup', stack: [Array], methods: [Object] },\n    [Symbol(kCapture)]: false,\n    [Symbol(kHeaders)]: {\n      'user-agent': 'Dart/2.18 (dart:io)',\n      'content-type': 'application/json',\n      'accept-encoding': 'gzip',\n      'content-length': '62',\n      host: '192.168.43.174:3000'\n    },\n    [Symbol(kHeadersCount)]: 10,\n    [Symbol(kTrailers)]: null,\n    [Symbol(kTrailersCount)]: 0\n  },\n  _sent100: false,\n  _expect_continue: false,\n  _maxRequestsPerSocket: 0,\n  locals: [Object: null prototype] {},\n  [Symbol(kCapture)]: false,\n  [Symbol(kBytesWritten)]: 0,\n  [Symbol(kEndCalled)]: false,\n  [Symbol(kNeedDrain)]: false,\n  [Symbol(corked)]: 0,\n  [Symbol(kOutHeaders)]: [Object: null prototype] {\n    'x-powered-by': [ 'X-Powered-By', 'Express' ]\n  },\n  [Symbol(kUniqueHeaders)]: null\n}\" (type ServerResponse) at path \"password\", wilaya_code: Cast to Number failed for value \"[Function: next]\" (type function) at path \"wilaya_code\""}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"error","message":"Error registering user: users validation failed: email: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: false,\n    errored: null,\n    closed: false,\n    closeEmitted: false,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 95671,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 95671,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 861,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'user-agent',\n    'Dart/2.18 (dart:io)',\n    'content-type',\n    'application/json',\n    'accept-encoding',\n    'gzip',\n    'content-length',\n    '61',\n    'host',\n    '192.168.43.174:3000'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/singup',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 95671,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 95671,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 861,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/users',\n  originalUrl: '/users/singup',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: null,\n    query: null,\n    pathname: '/singup',\n    path: '/singup',\n    href: '/singup',\n    _raw: '/singup'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    strictContentLength: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 861,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    _maxRequestsPerSocket: 0,\n    locals: [Object: null prototype] {},\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(kEndCalled)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] },\n    [Symbol(kUniqueHeaders)]: null\n  },\n  body: { email: 'lllll@gmail.com', password: 'gggg', wilaya_code: 5 },\n  _body: true,\n  length: undefined,\n  route: Route {\n    path: '/singup',\n    stack: [ [Layer] ],\n    methods: { post: true }\n  },\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    'user-agent': 'Dart/2.18 (dart:io)',\n    'content-type': 'application/json',\n    'accept-encoding': 'gzip',\n    'content-length': '61',\n    host: '192.168.43.174:3000'\n  },\n  [Symbol(kHeadersCount)]: 10,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}\" (type IncomingMessage) at path \"email\", password: Cast to string failed for value \"<ref *2> ServerResponse {\n  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  outputData: [],\n  outputSize: 0,\n  writable: true,\n  destroyed: false,\n  _last: false,\n  chunkedEncoding: false,\n  shouldKeepAlive: true,\n  maxRequestsOnConnectionReached: false,\n  _defaultKeepAlive: true,\n  useChunkedEncodingByDefault: true,\n  sendDate: true,\n  _removedConnection: false,\n  _removedContLen: false,\n  _removedTE: false,\n  strictContentLength: false,\n  _contentLength: null,\n  _hasBody: true,\n  _trailer: '',\n  finished: false,\n  _headerSent: false,\n  _closed: false,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 95671,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 95671,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [IncomingMessage],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: [Circular *2],\n    [Symbol(async_id_symbol)]: 861,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _header: null,\n  _keepAliveTimeout: 5000,\n  _onPendingData: [Function: bound updateOutgoingData],\n  req: IncomingMessage {\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: true,\n      endEmitted: true,\n      reading: false,\n      constructed: true,\n      sync: false,\n      needReadable: false,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: true,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: true,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 861,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    httpVersionMajor: 1,\n    httpVersionMinor: 1,\n    httpVersion: '1.1',\n    complete: true,\n    rawHeaders: [\n      'user-agent',\n      'Dart/2.18 (dart:io)',\n      'content-type',\n      'application/json',\n      'accept-encoding',\n      'gzip',\n      'content-length',\n      '61',\n      'host',\n      '192.168.43.174:3000'\n    ],\n    rawTrailers: [],\n    aborted: false,\n    upgrade: false,\n    url: '/singup',\n    method: 'POST',\n    statusCode: null,\n    statusMessage: null,\n    client: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 861,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _consuming: true,\n    _dumped: false,\n    next: [Function: next],\n    baseUrl: '/users',\n    originalUrl: '/users/singup',\n    _parsedUrl: Url {\n      protocol: null,\n      slashes: null,\n      auth: null,\n      host: null,\n      port: null,\n      hostname: null,\n      hash: null,\n      search: null,\n      query: null,\n      pathname: '/singup',\n      path: '/singup',\n      href: '/singup',\n      _raw: '/singup'\n    },\n    params: {},\n    query: {},\n    res: [Circular *2],\n    body: { email: 'lllll@gmail.com', password: 'gggg', wilaya_code: 5 },\n    _body: true,\n    length: undefined,\n    route: Route { path: '/singup', stack: [Array], methods: [Object] },\n    [Symbol(kCapture)]: false,\n    [Symbol(kHeaders)]: {\n      'user-agent': 'Dart/2.18 (dart:io)',\n      'content-type': 'application/json',\n      'accept-encoding': 'gzip',\n      'content-length': '61',\n      host: '192.168.43.174:3000'\n    },\n    [Symbol(kHeadersCount)]: 10,\n    [Symbol(kTrailers)]: null,\n    [Symbol(kTrailersCount)]: 0\n  },\n  _sent100: false,\n  _expect_continue: false,\n  _maxRequestsPerSocket: 0,\n  locals: [Object: null prototype] {},\n  [Symbol(kCapture)]: false,\n  [Symbol(kBytesWritten)]: 0,\n  [Symbol(kEndCalled)]: false,\n  [Symbol(kNeedDrain)]: false,\n  [Symbol(corked)]: 0,\n  [Symbol(kOutHeaders)]: [Object: null prototype] {\n    'x-powered-by': [ 'X-Powered-By', 'Express' ]\n  },\n  [Symbol(kUniqueHeaders)]: null\n}\" (type ServerResponse) at path \"password\", wilaya_code: Cast to Number failed for value \"[Function: next]\" (type function) at path \"wilaya_code\""}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"error","message":"Error registering user: users validation failed: email: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: false,\n    errored: null,\n    closed: false,\n    closeEmitted: false,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 272110,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 272110,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: false,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 975,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'content-length',\n    '86',\n    'accept-encoding',\n    'gzip, deflate, br',\n    'Accept',\n    '*/*',\n    'User-Agent',\n    'Thunder Client (https://www.thunderclient.com)',\n    'Content-Type',\n    'application/json',\n    'Host',\n    'localhost:3000',\n    'Connection',\n    'close'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/singup',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 272110,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 272110,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: false,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      strictContentLength: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      _maxRequestsPerSocket: 0,\n      locals: [Object: null prototype] {},\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(kEndCalled)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype],\n      [Symbol(kUniqueHeaders)]: null\n    },\n    [Symbol(async_id_symbol)]: 975,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/users',\n  originalUrl: '/users/singup',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: null,\n    query: null,\n    pathname: '/singup',\n    path: '/singup',\n    href: '/singup',\n    _raw: '/singup'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: false,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    strictContentLength: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 975,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    _maxRequestsPerSocket: 0,\n    locals: [Object: null prototype] {},\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(kEndCalled)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] },\n    [Symbol(kUniqueHeaders)]: null\n  },\n  body: {\n    email: 'example5@example.com',\n    password: 'password123',\n    wilaya_code: 5\n  },\n  _body: true,\n  length: undefined,\n  route: Route {\n    path: '/singup',\n    stack: [ [Layer] ],\n    methods: { post: true }\n  },\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    'content-length': '86',\n    'accept-encoding': 'gzip, deflate, br',\n    accept: '*/*',\n    'user-agent': 'Thunder Client (https://www.thunderclient.com)',\n    'content-type': 'application/json',\n    host: 'localhost:3000',\n    connection: 'close'\n  },\n  [Symbol(kHeadersCount)]: 14,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}\" (type IncomingMessage) at path \"email\", password: Cast to string failed for value \"<ref *2> ServerResponse {\n  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  outputData: [],\n  outputSize: 0,\n  writable: true,\n  destroyed: false,\n  _last: false,\n  chunkedEncoding: false,\n  shouldKeepAlive: false,\n  maxRequestsOnConnectionReached: false,\n  _defaultKeepAlive: true,\n  useChunkedEncodingByDefault: true,\n  sendDate: true,\n  _removedConnection: false,\n  _removedContLen: false,\n  _removedTE: false,\n  strictContentLength: false,\n  _contentLength: null,\n  _hasBody: true,\n  _trailer: '',\n  finished: false,\n  _headerSent: false,\n  _closed: false,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _closeAfterHandlingError: false,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 272110,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      requestTimeout: 300000,\n      headersTimeout: 60000,\n      keepAliveTimeout: 5000,\n      connectionsCheckingInterval: 30000,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      noDelay: true,\n      keepAlive: false,\n      keepAliveInitialDelay: 0,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 35,\n      [Symbol(http.server.connections)]: ConnectionsList {},\n      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {\n        _idleTimeout: 30000,\n        _idlePrev: [TimersList],\n        _idleNext: [TimersList],\n        _idleStart: 272110,\n        _onTimeout: [Function: bound checkConnections],\n        _timerArgs: undefined,\n        _repeat: 30000,\n        _destroyed: false,\n        [Symbol(refed)]: false,\n        [Symbol(kHasPrimitive)]: false,\n        [Symbol(asyncId)]: 34,\n        [Symbol(triggerId)]: 1\n      },\n      [Symbol(kUniqueHeaders)]: null\n    },\n    parser: HTTPParser {\n      '0': null,\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [IncomingMessage],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: [Circular *2],\n    [Symbol(async_id_symbol)]: 975,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kSetNoDelay)]: true,\n    [Symbol(kSetKeepAlive)]: false,\n    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0\n  },\n  _header: null,\n  _keepAliveTimeout: 5000,\n  _onPendingData: [Function: bound updateOutgoingData],\n  req: IncomingMessage {\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: true,\n      endEmitted: true,\n      reading: false,\n      constructed: true,\n      sync: false,\n      needReadable: false,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: true,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: true,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 975,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    httpVersionMajor: 1,\n    httpVersionMinor: 1,\n    httpVersion: '1.1',\n    complete: true,\n    rawHeaders: [\n      'content-length',\n      '86',\n      'accept-encoding',\n      'gzip, deflate, br',\n      'Accept',\n      '*/*',\n      'User-Agent',\n      'Thunder Client (https://www.thunderclient.com)',\n      'Content-Type',\n      'application/json',\n      'Host',\n      'localhost:3000',\n      'Connection',\n      'close'\n    ],\n    rawTrailers: [],\n    aborted: false,\n    upgrade: false,\n    url: '/singup',\n    method: 'POST',\n    statusCode: null,\n    statusMessage: null,\n    client: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _closeAfterHandlingError: false,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *2],\n      [Symbol(async_id_symbol)]: 975,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kSetNoDelay)]: true,\n      [Symbol(kSetKeepAlive)]: false,\n      [Symbol(kSetKeepAliveInitialDelay)]: 0,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0\n    },\n    _consuming: true,\n    _dumped: false,\n    next: [Function: next],\n    baseUrl: '/users',\n    originalUrl: '/users/singup',\n    _parsedUrl: Url {\n      protocol: null,\n      slashes: null,\n      auth: null,\n      host: null,\n      port: null,\n      hostname: null,\n      hash: null,\n      search: null,\n      query: null,\n      pathname: '/singup',\n      path: '/singup',\n      href: '/singup',\n      _raw: '/singup'\n    },\n    params: {},\n    query: {},\n    res: [Circular *2],\n    body: {\n      email: 'example5@example.com',\n      password: 'password123',\n      wilaya_code: 5\n    },\n    _body: true,\n    length: undefined,\n    route: Route { path: '/singup', stack: [Array], methods: [Object] },\n    [Symbol(kCapture)]: false,\n    [Symbol(kHeaders)]: {\n      'content-length': '86',\n      'accept-encoding': 'gzip, deflate, br',\n      accept: '*/*',\n      'user-agent': 'Thunder Client (https://www.thunderclient.com)',\n      'content-type': 'application/json',\n      host: 'localhost:3000',\n      connection: 'close'\n    },\n    [Symbol(kHeadersCount)]: 14,\n    [Symbol(kTrailers)]: null,\n    [Symbol(kTrailersCount)]: 0\n  },\n  _sent100: false,\n  _expect_continue: false,\n  _maxRequestsPerSocket: 0,\n  locals: [Object: null prototype] {},\n  [Symbol(kCapture)]: false,\n  [Symbol(kBytesWritten)]: 0,\n  [Symbol(kEndCalled)]: false,\n  [Symbol(kNeedDrain)]: false,\n  [Symbol(corked)]: 0,\n  [Symbol(kOutHeaders)]: [Object: null prototype] {\n    'x-powered-by': [ 'X-Powered-By', 'Express' ]\n  },\n  [Symbol(kUniqueHeaders)]: null\n}\" (type ServerResponse) at path \"password\", wilaya_code: Cast to Number failed for value \"[Function: next]\" (type function) at path \"wilaya_code\""}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"User registered: example5@example.com"}
{"level":"info","message":"User registered: example5@example.com"}
{"level":"info","message":"تم تسجيل حدث جديد: رسالة نصية أو بيانات أخرى هنا"}
{"level":"info","message":"User registered: example6@example.com"}
{"level":"info","message":"User registered: example6@example.com"}
{"level":"error","message":"Error registering user: E11000 duplicate key error collection: pharmacist.users index: email_1 dup key: { email: \"example6@example.com\" }"}
{"level":"error","message":"Registration failed: E11000 duplicate key error collection: pharmacist.users index: email_1 dup key: { email: \"example6@example.com\" }"}
{"level":"info","message":"User registered: example7@example.com"}
{"level":"info","message":"User registered: example7@example.com"}
{"level":"info","message":"User registered: ll@gmail.com"}
{"level":"info","message":"User registered: ll@gmail.com"}
{"level":"error","message":"Error registering user: users validation failed: email: Invalid email address"}
{"level":"error","message":"Registration failed: users validation failed: email: Invalid email address"}
{"level":"info","message":"User registered: ggg@gmail.com"}
{"level":"info","message":"User registered: ggg@gmail.com"}
{"level":"info","message":"User registered: eeee@gmail.com"}
{"level":"info","message":"User registered: eeee@gmail.com"}
{"level":"info","message":"User registered: ddd@gmall.com"}
